<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ozeken.expensecalendar.mapper.ExpenseMapper">
    
    <!-- ExpenseWithGenre 用のマッピング定義 -->
<resultMap id="ExpenseWithGenreMap" type="com.ozeken.expensecalendar.dto.ExpenseWithGenre">
  <result property="id" column="id"/>
  <result property="userId" column="user_id"/>
  <result property="date" column="date"/>
  <result property="genreId" column="genre_id"/>
  <result property="genreName" column="genre_name"/>
  <result property="amount" column="amount"/>
  <result property="description" column="description"/>
</resultMap>

<resultMap id="DailyTotalMap" type="com.ozeken.expensecalendar.dto.DailyTotal">
    <result property="day" column="day"/>
    <result property="total" column="total"/>
</resultMap>


<!-- ================== 取得処理 ========================= -->

<!-- 
  指定されたユーザーIDに紐づく支出一覧を、ジャンル名付きでページネーション取得するSQL。
  genresテーブルをJOINし、各支出に対応するジャンル名を取得する。
  支出は日付の降順（新しい順）に並び、LIMIT/OFFSETで表示件数を制御する。
  主に一覧画面（支出履歴ページ）での表示に使用される。
-->
<select id="selectWithGenreByUserIdPaged" resultMap="ExpenseWithGenreMap">
  SELECT
    e.id,
    e.user_id,
    e.date,
    e.genre_id,
    g.name AS genre_name,
    e.amount,
    e.description
  FROM expenses e
  JOIN genres g ON e.genre_id = g.id
  WHERE e.user_id = #{userId}
  ORDER BY e.date DESC
  LIMIT #{limit} OFFSET #{offset}
</select>

    <!-- 
  指定された年月日、ユーザーIDに紐づく支出一覧を、ジャンル名付きでページネーション取得するSQL。
  genresテーブルをJOINし、各支出に対応するジャンル名を取得する。
  支出は日付の降順（新しい順）に並び、LIMIT/OFFSETで表示件数を制御する。
  主に一覧画面（支出履歴ページ）での表示に使用される。
-->
<select id="selectWithGenreByUserIdAndDayPaged" resultMap="ExpenseWithGenreMap">
  SELECT 
    e.id,
    e.user_id,
    e.date,
    e.amount,
    e.description,
    g.id AS genre_id,
    g.name AS genre_name
  FROM expenses e
  JOIN genres g ON e.genre_id = g.id
  WHERE e.user_id = #{userId}
    AND EXTRACT(YEAR FROM e.date) = #{year}
    AND EXTRACT(MONTH FROM e.date) = #{month}
    AND EXTRACT(DAY FROM e.date) = #{day}
  ORDER BY e.date DESC
  LIMIT #{limit} OFFSET #{offset}
</select>
    
<!-- 
   指定された支出IDとユーザーIDに一致する1件の支出データを取得するSQL。
  主に支出の更新時（編集画面表示時）に、既存データを取得する目的で使用される。
 -->
  <select id="selectByIdAndUserId" resultType="com.ozeken.expensecalendar.entity.Expense">
    SELECT id, user_id, date, genre_id, amount, description
    FROM expenses
    WHERE id = #{id} AND user_id = #{userId}
  </select>
  
  <!-- 
  ジャンル名付きで支出を1件のみ取得するSQL。
  genresテーブルをJOINし、各支出に対応するジャンル名を取得する。
  主に詳細表示画面での表示に使用される。
   -->
   <select id="selectWithGenreByIdAndUserId" resultMap="ExpenseWithGenreMap">
        SELECT
            e.id,
            e.user_id,
            e.date,
            e.genre_id,
            g.name AS genre_name,
            e.amount,
            e.description
        FROM expenses e
        JOIN genres g ON e.genre_id = g.id
        WHERE e.id = #{id} AND e.user_id = #{userId}
        ORDER BY e.date DESC
    </select>
 
<!-- 
  指定されたユーザーIDに紐づく、全支出の合計金額を取得するSQL。
  金額の合計が `long` の上限を超えないようにするため、
  登録前に現在の合計を取得し、オーバーフロー対策として使用される。
-->
<select id="selectTotalAmountByUserId" resultType="long">
  SELECT COALESCE(SUM(amount), 0)
  FROM expenses
  WHERE user_id = #{userId}
</select>

<!-- 
    指定された年月の支出合計金額を取得するSQL。
    単一の月に絞って、合計金額を1つ返す。
-->
<select id="selectMonthlyTotalByUserId" resultType="long">
  SELECT 
    COALESCE(SUM(amount), 0)
  FROM expenses
  WHERE user_id = #{userId}
    AND EXTRACT(YEAR FROM date) = #{year}
    AND EXTRACT(MONTH FROM date) = #{month}
</select>

<!-- 
  指定された年月における、日ごとの支出合計金額を取得するSQL。
  主にカレンダー表示の「日単位の合計金額」などに使用される。
-->
<select id="selectDailyTotalByUserIdAndMonth" resultMap="DailyTotalMap">
  SELECT 
    EXTRACT(DAY FROM e.date) AS day,
    SUM(e.amount) AS total
  FROM expenses e
  WHERE e.user_id = #{userId}
    AND EXTRACT(YEAR FROM e.date) = #{year}
    AND EXTRACT(MONTH FROM e.date) = #{month}
  GROUP BY day
  ORDER BY day
</select>


<!-- ================ 登録・更新・削除処理 ======================= -->

  <!-- 新規登録 -->
  <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO expenses (user_id, date, genre_id, amount, description)
    VALUES (#{userId}, #{date}, #{genreId}, #{amount}, #{description})
  </insert>

  <!-- 更新 -->
  <update id="update">
    UPDATE expenses
    SET date = #{date},
        genre_id = #{genreId},
        amount = #{amount},
        description = #{description}
    WHERE id = #{id} AND user_id = #{userId}
  </update>

  <!-- 削除 -->
  <delete id="deleteByIdAndUserId">
    DELETE FROM expenses
    WHERE id = #{id} AND user_id = #{userId}
  </delete>
  
</mapper>
